// Code generated by MockGen. DO NOT EDIT.
// Source: render/values.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockValues is a mock of Values interface
type MockValues struct {
	ctrl     *gomock.Controller
	recorder *MockValuesMockRecorder
}

// MockValuesMockRecorder is the mock recorder for MockValues
type MockValuesMockRecorder struct {
	mock *MockValues
}

// NewMockValues creates a new mock instance
func NewMockValues(ctrl *gomock.Controller) *MockValues {
	mock := &MockValues{ctrl: ctrl}
	mock.recorder = &MockValuesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValues) EXPECT() *MockValuesMockRecorder {
	return m.recorder
}

// SetStart mocks base method
func (m *MockValues) SetStart(arg0 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStart", arg0)
}

// SetStart indicates an expected call of SetStart
func (mr *MockValuesMockRecorder) SetStart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStart", reflect.TypeOf((*MockValues)(nil).SetStart), arg0)
}

// SetStop mocks base method
func (m *MockValues) SetStop(arg0 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStop", arg0)
}

// SetStop indicates an expected call of SetStop
func (mr *MockValuesMockRecorder) SetStop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStop", reflect.TypeOf((*MockValues)(nil).SetStop), arg0)
}

// SetStep mocks base method
func (m *MockValues) SetStep(arg0 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStep", arg0)
}

// SetStep indicates an expected call of SetStep
func (mr *MockValuesMockRecorder) SetStep(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStep", reflect.TypeOf((*MockValues)(nil).SetStep), arg0)
}

// SetCurrent mocks base method
func (m *MockValues) SetCurrent(arg0 float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCurrent", arg0)
}

// SetCurrent indicates an expected call of SetCurrent
func (mr *MockValuesMockRecorder) SetCurrent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrent", reflect.TypeOf((*MockValues)(nil).SetCurrent), arg0)
}

// GetStart mocks base method
func (m *MockValues) GetStart() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStart")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetStart indicates an expected call of GetStart
func (mr *MockValuesMockRecorder) GetStart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStart", reflect.TypeOf((*MockValues)(nil).GetStart))
}

// GetStop mocks base method
func (m *MockValues) GetStop() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStop")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetStop indicates an expected call of GetStop
func (mr *MockValuesMockRecorder) GetStop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStop", reflect.TypeOf((*MockValues)(nil).GetStop))
}

// GetStep mocks base method
func (m *MockValues) GetStep() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStep")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetStep indicates an expected call of GetStep
func (mr *MockValuesMockRecorder) GetStep() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStep", reflect.TypeOf((*MockValues)(nil).GetStep))
}

// GetCurrent mocks base method
func (m *MockValues) GetCurrent() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrent")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetCurrent indicates an expected call of GetCurrent
func (mr *MockValuesMockRecorder) GetCurrent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrent", reflect.TypeOf((*MockValues)(nil).GetCurrent))
}

// Statistics mocks base method
func (m *MockValues) Statistics(arg0 int) (string, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statistics", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// Statistics indicates an expected call of Statistics
func (mr *MockValuesMockRecorder) Statistics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistics", reflect.TypeOf((*MockValues)(nil).Statistics), arg0)
}
