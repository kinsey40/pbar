// Code generated by MockGen. DO NOT EDIT.
// Source: render/render.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRenderInterface is a mock of RenderInterface interface
type MockRenderInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRenderInterfaceMockRecorder
}

// MockRenderInterfaceMockRecorder is the mock recorder for MockRenderInterface
type MockRenderInterfaceMockRecorder struct {
	mock *MockRenderInterface
}

// NewMockRenderInterface creates a new mock instance
func NewMockRenderInterface(ctrl *gomock.Controller) *MockRenderInterface {
	mock := &MockRenderInterface{ctrl: ctrl}
	mock.recorder = &MockRenderInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRenderInterface) EXPECT() *MockRenderInterfaceMockRecorder {
	return m.recorder
}

// MakeRenderObject mocks base method
func (m *MockRenderInterface) MakeRenderObject(arg0, arg1, arg2 float64) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeRenderObject", arg0, arg1, arg2)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// MakeRenderObject indicates an expected call of MakeRenderObject
func (mr *MockRenderInterfaceMockRecorder) MakeRenderObject(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRenderObject", reflect.TypeOf((*MockRenderInterface)(nil).MakeRenderObject), arg0, arg1, arg2)
}

// Update mocks base method
func (m *MockRenderInterface) Update(arg0 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRenderInterfaceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRenderInterface)(nil).Update), arg0)
}

// render mocks base method
func (m *MockRenderInterface) render(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "render", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// render indicates an expected call of render
func (mr *MockRenderInterfaceMockRecorder) render(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "render", reflect.TypeOf((*MockRenderInterface)(nil).render), arg0)
}

// formatProgressBar mocks base method
func (m *MockRenderInterface) formatProgressBar() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "formatProgressBar")
	ret0, _ := ret[0].(string)
	return ret0
}

// formatProgressBar indicates an expected call of formatProgressBar
func (mr *MockRenderInterfaceMockRecorder) formatProgressBar() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "formatProgressBar", reflect.TypeOf((*MockRenderInterface)(nil).formatProgressBar))
}

// formatSpeedMeter mocks base method
func (m *MockRenderInterface) formatSpeedMeter() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "formatSpeedMeter")
	ret0, _ := ret[0].(error)
	return ret0
}

// formatSpeedMeter indicates an expected call of formatSpeedMeter
func (mr *MockRenderInterfaceMockRecorder) formatSpeedMeter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "formatSpeedMeter", reflect.TypeOf((*MockRenderInterface)(nil).formatSpeedMeter))
}
