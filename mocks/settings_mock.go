// Code generated by MockGen. DO NOT EDIT.
// Source: render/settings.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSettings is a mock of Settings interface
type MockSettings struct {
	ctrl     *gomock.Controller
	recorder *MockSettingsMockRecorder
}

// MockSettingsMockRecorder is the mock recorder for MockSettings
type MockSettingsMockRecorder struct {
	mock *MockSettings
}

// NewMockSettings creates a new mock instance
func NewMockSettings(ctrl *gomock.Controller) *MockSettings {
	mock := &MockSettings{ctrl: ctrl}
	mock.recorder = &MockSettingsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSettings) EXPECT() *MockSettingsMockRecorder {
	return m.recorder
}

// SetDescription mocks base method
func (m *MockSettings) SetDescription(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDescription", arg0)
}

// SetDescription indicates an expected call of SetDescription
func (mr *MockSettingsMockRecorder) SetDescription(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDescription", reflect.TypeOf((*MockSettings)(nil).SetDescription), arg0)
}

// SetFinishedIterationSymbol mocks base method
func (m *MockSettings) SetFinishedIterationSymbol(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFinishedIterationSymbol", arg0)
}

// SetFinishedIterationSymbol indicates an expected call of SetFinishedIterationSymbol
func (mr *MockSettingsMockRecorder) SetFinishedIterationSymbol(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinishedIterationSymbol", reflect.TypeOf((*MockSettings)(nil).SetFinishedIterationSymbol), arg0)
}

// SetCurrentIterationSymbol mocks base method
func (m *MockSettings) SetCurrentIterationSymbol(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCurrentIterationSymbol", arg0)
}

// SetCurrentIterationSymbol indicates an expected call of SetCurrentIterationSymbol
func (mr *MockSettingsMockRecorder) SetCurrentIterationSymbol(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCurrentIterationSymbol", reflect.TypeOf((*MockSettings)(nil).SetCurrentIterationSymbol), arg0)
}

// SetRemainingIterationSymbol mocks base method
func (m *MockSettings) SetRemainingIterationSymbol(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRemainingIterationSymbol", arg0)
}

// SetRemainingIterationSymbol indicates an expected call of SetRemainingIterationSymbol
func (mr *MockSettingsMockRecorder) SetRemainingIterationSymbol(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRemainingIterationSymbol", reflect.TypeOf((*MockSettings)(nil).SetRemainingIterationSymbol), arg0)
}

// SetLineSize mocks base method
func (m *MockSettings) SetLineSize(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLineSize", arg0)
}

// SetLineSize indicates an expected call of SetLineSize
func (mr *MockSettingsMockRecorder) SetLineSize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLineSize", reflect.TypeOf((*MockSettings)(nil).SetLineSize), arg0)
}

// SetMaxLineSize mocks base method
func (m *MockSettings) SetMaxLineSize(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxLineSize", arg0)
}

// SetMaxLineSize indicates an expected call of SetMaxLineSize
func (mr *MockSettingsMockRecorder) SetMaxLineSize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxLineSize", reflect.TypeOf((*MockSettings)(nil).SetMaxLineSize), arg0)
}

// SetLParen mocks base method
func (m *MockSettings) SetLParen(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLParen", arg0)
}

// SetLParen indicates an expected call of SetLParen
func (mr *MockSettingsMockRecorder) SetLParen(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLParen", reflect.TypeOf((*MockSettings)(nil).SetLParen), arg0)
}

// SetRParen mocks base method
func (m *MockSettings) SetRParen(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRParen", arg0)
}

// SetRParen indicates an expected call of SetRParen
func (mr *MockSettingsMockRecorder) SetRParen(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRParen", reflect.TypeOf((*MockSettings)(nil).SetRParen), arg0)
}

// GetDescription mocks base method
func (m *MockSettings) GetDescription() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDescription")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDescription indicates an expected call of GetDescription
func (mr *MockSettingsMockRecorder) GetDescription() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDescription", reflect.TypeOf((*MockSettings)(nil).GetDescription))
}

// GetFinishedIterationSymbol mocks base method
func (m *MockSettings) GetFinishedIterationSymbol() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFinishedIterationSymbol")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFinishedIterationSymbol indicates an expected call of GetFinishedIterationSymbol
func (mr *MockSettingsMockRecorder) GetFinishedIterationSymbol() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFinishedIterationSymbol", reflect.TypeOf((*MockSettings)(nil).GetFinishedIterationSymbol))
}

// GetCurrentIterationSymbol mocks base method
func (m *MockSettings) GetCurrentIterationSymbol() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentIterationSymbol")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCurrentIterationSymbol indicates an expected call of GetCurrentIterationSymbol
func (mr *MockSettingsMockRecorder) GetCurrentIterationSymbol() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentIterationSymbol", reflect.TypeOf((*MockSettings)(nil).GetCurrentIterationSymbol))
}

// GetRemainingIterationSymbol mocks base method
func (m *MockSettings) GetRemainingIterationSymbol() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemainingIterationSymbol")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRemainingIterationSymbol indicates an expected call of GetRemainingIterationSymbol
func (mr *MockSettingsMockRecorder) GetRemainingIterationSymbol() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemainingIterationSymbol", reflect.TypeOf((*MockSettings)(nil).GetRemainingIterationSymbol))
}

// GetLineSize mocks base method
func (m *MockSettings) GetLineSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLineSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetLineSize indicates an expected call of GetLineSize
func (mr *MockSettingsMockRecorder) GetLineSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLineSize", reflect.TypeOf((*MockSettings)(nil).GetLineSize))
}

// GetMaxLineSize mocks base method
func (m *MockSettings) GetMaxLineSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxLineSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetMaxLineSize indicates an expected call of GetMaxLineSize
func (mr *MockSettingsMockRecorder) GetMaxLineSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxLineSize", reflect.TypeOf((*MockSettings)(nil).GetMaxLineSize))
}

// GetLParen mocks base method
func (m *MockSettings) GetLParen() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLParen")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetLParen indicates an expected call of GetLParen
func (mr *MockSettingsMockRecorder) GetLParen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLParen", reflect.TypeOf((*MockSettings)(nil).GetLParen))
}

// GetRParen mocks base method
func (m *MockSettings) GetRParen() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRParen")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRParen indicates an expected call of GetRParen
func (mr *MockSettingsMockRecorder) GetRParen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRParen", reflect.TypeOf((*MockSettings)(nil).GetRParen))
}

// CreateBarString mocks base method
func (m *MockSettings) CreateBarString(arg0 int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBarString", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// CreateBarString indicates an expected call of CreateBarString
func (mr *MockSettingsMockRecorder) CreateBarString(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBarString", reflect.TypeOf((*MockSettings)(nil).CreateBarString), arg0)
}
